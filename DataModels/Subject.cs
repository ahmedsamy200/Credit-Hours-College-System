//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataModels
{
    using System;
    using System.Collections.Generic;
    
    public partial class Subject
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Subject()
        {
            this.ProfessorSubjects = new HashSet<ProfessorSubject>();
            this.StudentSubjects = new HashSet<StudentSubject>();
            this.Subject1 = new HashSet<Subject>();
        }
    
        public int subID { get; set; }
        public string subjectName { get; set; }
        public Nullable<int> deptID { get; set; }
        public string code { get; set; }
        public Nullable<double> creditHours { get; set; }
        public Nullable<int> preSubject { get; set; }
        public string day { get; set; }
        public Nullable<System.TimeSpan> timeFrom { get; set; }
        public Nullable<System.TimeSpan> timeTo { get; set; }
    
        public virtual Department Department { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<ProfessorSubject> ProfessorSubjects { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<StudentSubject> StudentSubjects { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Subject> Subject1 { get; set; }
        public virtual Subject Subject2 { get; set; }
    }
}
